=======副本集===============
mongoDB中的集群叫做副本集(Replica Set),副本集中的节点都具有相同的数据
1:通过配置文件启动,并为每一个节点设置好集群的名字
	replication:
		replSetName: Kosmos
2:随便找到集群中的一个节点,使用 ./mongo 登陆命令行 (./mongo ip:port)
	rs.initiate() 来初始化一个集群
	rs.add("ip:port") 往副本集中加入数据节点
	rs.addArb("ip:port") 往副本集中加入仲裁节点
		注意 rs.add("ip") 只能在主节点运行,使用 rs.status() 来确定主节点
		* 虚拟机中如果节点的名称 是 计算机的名称 ,可能不能解析,导致集群失败,可以 修改节点名称 来解决
		修改 节点名称
			cfg = rs.conf()
			cfg.members[0].host = "10.157.192.175:27017"
			rs.reconfig(cfg)
		rs.remove("ip") 移除节点
3:* 注意 经过测试
	由2台机器组成的副本集,2个数据节点
		1) 主节点挂了,则不能选举出另外一个作为主节点,因为剩下一个,无法选举！！！！！
		2) 从节点挂了,则剩下的主节点变成从节点,(想不通!)
		结论: 2台数据节点组成的副本集,没有容灾性,只要挂掉一个,整个副本集就不能用
	由3台机器组成的副本集,3个数据节点
		1) 主节点挂了,则可以选择出另外一个主节点,整个副本集没事
		2) 从节点挂了,整个副本集没事
		结论: 3台数据节点,只允许挂一台机器,再挂一台则回到2个数据节点情况
	有3台机器组成的副本集,2个数据节点+1个仲裁节点
		1) 主节点挂了,则另外一个数据节点成为主节点
		2) 从节点挂了,则主节点还是主节点
		3) 仲裁节点挂了,则情况回到2个数据节点的情况
		结论: 2数据节点+1仲裁节点,允许挂一台
	
========分片+副本集========================

副本集1: 
    ==========mongodb.conf========
	replication:
		replSetName: shardA
	sharding:
		clusterRole: shardsvr
	==============================
	机器列表:
		10.157.192.141:30000
		10.157.192.141:30001
		10.157.192.141:30002
副本集2:
	==========mongodb.conf========
	replication:
		replSetName: shardB
	sharding:
		clusterRole: shardsvr
	==============================
	机器列表:
		10.157.192.141:30100
		10.157.192.141:30101
		10.157.192.141:30102
配置服务器
	==========mongodb.conf========
	replication:
		replSetName: shardConf
	sharding:
		clusterRole: configsvr
	==============================
	机器列表:
		10.157.192.141:27019
		10.157.192.141:27020
		10.157.192.141:27021
mongos
	==========mongodb.conf========
	sharding:
		configDB: 10.157.192.141:27019,10.157.192.141:27020,10.157.192.141:27021
	==============================
	机器:
		10.157.192.141:40000
	使用 mongos 的命令行 mongo 10.157.192.141:40000
		1):添加分片集群
			sh.addShard("shardA/10.157.192.141:30000,10.157.192.141:30001")
			sh.addShard("shardB/10.157.192.141:30100,10.157.192.141:30101")
				//sh.removeShard("shard1/10.157.192.141:30100,10.157.192.141:30101")
		2):开启分片的数据库
			sh.enableSharding("cloud-docs")
		3):设置分片的集合和分片键
			sh.shardCollection("cloud-docs.spreadsheets",{username:1,_id:1})
	对该机器的操作就是对集群的操作,往 spreadsheets 集合中插入的数据 会被路由到不同的分片集群
	


附录 数据服务器 配置服务器的 mongos 配置文件
====================数据服务器========================
systemLog:
   destination: file
   path: ..\log\mongodb.log
   logAppend: true
storage:
   dbPath: ..\db
net:
    bindIp: 10.157.192.141         /*绑定的机器,最好省略,*/
    port: 30000
replication:
    replSetName: shardA            /*集群的名称,名称可以随意*/
sharding:
    clusterRole: shardsvr

====================配置服务器========================
=====     mongodb从3.2版本开始,配置服务器就配成集群   ====
systemLog:
   destination: file
   path: ..\log\mongodb.log
   logAppend: true
storage:
   dbPath: ..\db
net:
    bindIp: 10.157.192.141       /*绑定的机器,最好省略,*/
    port: 27019
replication:
    replSetName: shardConf       /*集群的名称,名称可以随意*/
sharding:
    clusterRole: configsvr

====================mongos=====================
systemLog:
   destination: file
   path: ..\log\mongos.log
   logAppend: true
net:
    bindIp: 10.157.192.141     /*绑定的机器,最好省略,*/
    port: 40000
sharding:
   configDB: 10.157.192.141:27019,10.157.192.141:27020,10.157.192.141:27021
================================================