public delegate int MyDel(int a,int b);  //创建一个委托
static int M1(int a,int b){   //创建方法
   Thread.Sleep(1000);
   Console.WriteLine("工作线程{0}",Thread.CurrentThread.ManagedThreadId);
   return a+b;
}

方法一：
   MyDel myDel=new MyDel(M1);
      //BeginInvoke方法由【线程池】提供一个线程来执行【当前委托】 执行的方法
   IAsyncResult delResult=myDel.BeginInvoke(1,3,null,null);  
      //取得委托执行的返回值,此方法会阻塞当前线程，等到线程执行完成才继续往下执行
   int result=myDel.EndInvoke(delResult)  //4

方法二：
           //使用CallBack回调函数，工作线程执行完后直接执行回调函数
   IAsyncResult delResult=myDel.BeginInvoke(1,3,new AsyncCallBack(CallBack),6);
           //回调函数
   static void CallBack(IAsyncResult result){  //此处参数为BeginInvoke执行完后返回的接口
         AsyncResult aResult = (AsyncResult)result;  //把接口转换成实例
         MyDel Del=(MyDel)aResult.AsyncState;  //把实例转成成委托
         int addResult=Del.EndInvoke(result)   //在回调函数内部调用EndInvoke方法返回委托执行结果
         int state=(int)aResult.AsyncState;   //取得BeginInvoke方法的最后一个参数
   }