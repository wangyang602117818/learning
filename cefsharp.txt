
nuget: CefSharp.WinForms.NETCore

1. 在应用程序启动之前初始化,在应用程序关闭之后关闭
	//初始化
	var settings = new CefSettings();
	Cef.Initialize(settings, false, browserProcessHandler: null);

	ApplicationConfiguration.Initialize();
	Application.Run(new Form1());

	//关闭
	Cef.Shutdown();
2. 	browser加入到页面的容器控件
    public partial class Form1 : Form
	{
		public ChromiumWebBrowser _browser = null;
		public Form1(){
			string basePath = AppDomain.CurrentDomain.BaseDirectory;
			this._browser = new ChromiumWebBrowser(basePath + "\\html\\form1.html")
			{
				Dock = DockStyle.Fill
			};
			this.panel1.Controls.Add(this._browser);
		}
	}
3. _browser加载完成之后调用前端方法
	this._browser.FrameLoadEnd += (sender, args) =>
	{
		//Wait for the MainFrame to finish loading
		if (args.Frame.IsMain)
		{
			args.Frame.ExecuteJavaScriptAsync("xm()");
		}
	};
	
4. js调用后台方法
	1) 创建暴露类
		public class BoundObject
		{
			public int Add(int a, int b)
			{
				return a + b;
			}
		}
	2) 注册暴露实例到 JavascriptObjectRepository
		this._browser.JavascriptObjectRepository.Register("boundAsync", new BoundObject());
		//查看是否暴露成功(可选)
		//browser.JavascriptObjectRepository.ObjectBoundInJavascript += (sender, e) =>
		//{
		//	var name = e.ObjectName;
		//	Debug.WriteLine($"Object {e.ObjectName} was bound successfully.");
		//};
	3) 调用暴露方法
		(async function () {
			await CefSharp.BindObjectAsync("boundAsync");
			boundAsync.add(16, 2).then(function (actualResult) {
				alert(actualResult);
			});
		})();
		
5. Control的扩展方法(这样调用就不会发送阻塞)
	public static class ControlExtensions
    {
        /// <summary>
        /// Executes the Action asynchronously on the UI thread, does not block execution on the calling thread.
        /// </summary>
        /// <param name="control">the control for which the update is required</param>
        /// <param name="action">action to be performed on the control</param>
        public static void InvokeOnUiThreadIfRequired(this Control control, Action action)
        {
            if (control.Disposing || control.IsDisposed || !control.IsHandleCreated)
            {
                return;
            }
            if (control.InvokeRequired)
            {
                control.BeginInvoke(action);
            }
            else
            {
                action.Invoke();
            }
        }
    }
6. 利用扩展方法调用其他窗体
	formInstance.InvokeOnUiThreadIfRequired(() =>
	{
		Form2 form2 = new Form2();
		form2.ShowDialog();
	});
	