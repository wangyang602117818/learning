1. springboot默认不提供RestTemplate实例的直接注入,而注入的是RestTemplateBuilder实例
通过构造函数的方式生成RestTemplate实例
	public class IndexController {
		private RestTemplate restTemplate;
		public IndexController(RestTemplateBuilder restTemplateBuilder) {
			this.restTemplate = restTemplateBuilder.build();
		}
	}
2. 通过RestTemplate方式请求https会出现证书错误,通过以下方式绕过证书
1)新建 SSL 类
	import java.io.IOException;
	import java.net.HttpURLConnection;
	import java.security.SecureRandom;
	import java.security.cert.X509Certificate;
	import javax.net.ssl.*;
	import org.springframework.http.client.SimpleClientHttpRequestFactory;
	public class SSL extends SimpleClientHttpRequestFactory {
		@Override
		protected void prepareConnection(HttpURLConnection connection, String httpMethod) throws IOException {
			if (connection instanceof HttpsURLConnection) {
				prepareHttpsConnection((HttpsURLConnection) connection);
			}
			super.prepareConnection(connection, httpMethod);
		}
		private void prepareHttpsConnection(HttpsURLConnection connection) {
			connection.setHostnameVerifier(new SkipHostnameVerifier());
			try {
				connection.setSSLSocketFactory(createSslSocketFactory());
			} catch (Exception ex) {
				// Ignore
			}
		}
		private SSLSocketFactory createSslSocketFactory() throws Exception {
			SSLContext context = SSLContext.getInstance("TLS");
			context.init(null, new TrustManager[] { new SkipX509TrustManager() }, new SecureRandom());
			return context.getSocketFactory();
		}
		private class SkipHostnameVerifier implements HostnameVerifier {
			@Override
			public boolean verify(String s, SSLSession sslSession) {
				return true;
			}
		}
		private static class SkipX509TrustManager implements X509TrustManager { 
			@Override
			public X509Certificate[] getAcceptedIssuers() {
				return new X509Certificate[0];
			}
			@Override
			public void checkClientTrusted(X509Certificate[] chain, String authType) {
			}
			@Override
			public void checkServerTrusted(X509Certificate[] chain, String authType) {
			}
		}
	}
2) 给springboot提供 RestTemplate 和 ClientHttpRequestFactory 注入
	@Configuration
	public class RestTemplateConfig {
		@Bean
		public RestTemplate restTemplate(ClientHttpRequestFactory factory) {
			RestTemplate restTemplate = new RestTemplate(factory);
			restTemplate.getMessageConverters().set(1, new StringHttpMessageConverter(Charset.forName("UTF-8")));
			return restTemplate;
		}
		@Bean
		public ClientHttpRequestFactory simpleClientHttpRequestFactory() {
			SSL factory = new SSL(); 
			factory.setReadTimeout(5000);
			factory.setConnectTimeout(5000);
			return factory;
		}
	}
3) 直接通过注入的方式使用 RestTemplate
	public class IndexController {
		@Autowired
		private RestTemplate restTemplate;
	}
