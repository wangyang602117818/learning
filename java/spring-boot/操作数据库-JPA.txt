jpa是springboot框架自带orm,使用Hibernate作为默认实现
引用
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-data-jpa</artifactId>
	</dependency>
	<dependency>
		<groupId>com.microsoft.sqlserver</groupId>
		<artifactId>mssql-jdbc</artifactId>
		<scope>runtime</scope>
	</dependency>
application.properties
	spring.datasource.url=jdbc:sqlserver://localhost\\MSSQLSERVER1;TrustServerCertificate=True;databaseName=UserCenter
	spring.datasource.username=wang
	spring.datasource.password=123
	#不自动转换下划线的数据表字段名称(一般需要加上)
	spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
	spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
	#除了基本的连接字符串配置外,还可以配置以下节点
	spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
	#是否自动生成schme(none): create,create-drop,update,validate,none
	spring.jpa.hibernate.ddl-auto=none
	spring.jpa.show-sql=true
	spring.jpa.properties.hibernate.format_sql=true
	spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.SQLServer2008Dialect
1. 新建数据库实体(字段首字母小写方便之后的约定查询),添加lombok插件自动生成属性
    @Data
	@Entity(name="role")
	public class Role {
		@Id
		@GeneratedValue(strategy = GenerationType.IDENTITY)
		private int id;
		private String name;
		private String description;
		private Integer permissionCount;
		private LocalDateTime updateTime;
		private LocalDateTime createTime;
	}
	注解:   @Entity: 表明该类是一个数据库实体 
			@Table(name = "role") : 指定数据表名称,不指定和类名一致
			@Id: 主键id
			@GeneratedValue(strategy = GenerationType.IDENTITY) : 表示改字段自增,一般和@Id配合使用
			@Column : 指定数据表的字段名称和长度,一般数据库字段和类字段名称不一致时使用
2. 新建数据访问类
	public interface IRoleRepository extends JpaRepository<Role, Long> {

	}
3. 注入RoleRepository
	@Autowired
	private IRoleRepository roleRepo;
4. 保存数据,返回改数据(保存多个道理一样)
	Role role = new Role();
	role.Name="name11";
	role.Description="desc11";
	var data = roleRepo.save(role);
5. 根据主键id查询
	Optional<Role> optional = roleRepo.findById(12);
	var role = optional.isEmpty() ? null : optional.get();
6. 分页查询(需要添加get;set;): page从0开始
	Pageable pageable = PageRequest.of(0, 2, Sort.by("Id").ascending());
	List<Role> data = roleRepo.findAll(pageable).getContent();
7. 根据主键id更新,返回更新之后的对象: 这种方式更新所有字段
	Role role=new Role();
	role.setId(23);
	role.setName("name23");
	role.setDescription("desc23");
	Role data = roleRepo.save(role);
8. 更新部分字段(需要在类上添加 @Entity(name = "role") ,否则无法识别role关键字),返回受影响的行数
	@Query(value =  "update role  set name=?2 where id=?1")
	@Modifying
	@Transactional
	public int updateName(int id, String name);
9. 删除使用 deleteById 方法
10. 使用本地sql查询(nativeQuery):
    @Query(value =  "select * from role where description = ?1",nativeQuery = true)
	public List<Role> FindByDesc(String description);
11. 按照约定名称规则查询
    public List<Role> findByName(String name);
	public List<Role> findByNameLike(String name);  //自己在参数中添加 %name%
	List<Cus> findBySexOrderByNameAsc(String sex);
	　 And　　　　并且
	　 Or　　　　  或
	　 Is,Equals　　　　等于
	　 Between　　　　  两者之间
	　 LessThan　　　　　　小于
	　 LessThanEqual   　　小于等于
	　 GreaterThan　　　　 大于
	　 GreaterThanEqual　  大于等于
	　 After　　　　之后（时间） >
	　 Before　　　 之前（时间） <
	　 IsNull　　　　　　　　等于Null
	　 IsNotNull,NotNull　　 不等于Null
	　 Like　　　　模糊查询。查询件中需要自己加 %
	　 NotLike     不在模糊范围内。查询件中需要自己加 %
	　 StartingWith　　以某开头
	　 EndingWith　　  以某结束
	　 Containing　　　包含某
	　 OrderBy　　排序
	　 Not　　　　不等于
	　 In　　　　 某范围内
	　 NotIn　　  某范围外
	　 True　　　　真
	　 False　　　 假
	　 IgnoreCase　　忽略大小写
	
	








