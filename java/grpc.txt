1. 在项目中添加proto文件(src/main/proto/hello.proto):
	syntax = "proto3";
	option java_multiple_files = true;
	option java_package = "com.grapdemo";
	service Hello {
	  rpc SayHello (HelloRequest) returns (HelloResponse) {}
	}
	message HelloRequest {
	  string name = 1;
	}
	message HelloResponse {
	  string message = 1;
	}
2. 在pom.xml中添加配置,用eclipse生成调用代码,并且把grpc-java和java两个生成的文件夹加入build path
<dependencies>
	<dependency>
		<groupId>io.grpc</groupId>
		<artifactId>grpc-all</artifactId>
		<version>1.50.2</version>
	</dependency>
	<dependency>
		<groupId>javax.annotation</groupId>
		<artifactId>javax.annotation-api</artifactId>
		<version>1.3.2</version>
	</dependency>
</dependencies>
<build>
	<extensions>
		<extension>
			<groupId>kr.motd.maven</groupId>
			<artifactId>os-maven-plugin</artifactId>
			<version>1.7.0</version>
		</extension>
	</extensions>
	<plugins>
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-compiler-plugin</artifactId>
			<version>3.10.1</version>
			<configuration>
				<source>1.8</source>
				<target>1.8</target>
				<encoding>UTF-8</encoding>
			</configuration>
		</plugin>
		<plugin>
			<groupId>org.xolstice.maven.plugins</groupId>
			<artifactId>protobuf-maven-plugin</artifactId>
			<version>0.6.1</version>
			<configuration>
				<pluginId>grpc-java</pluginId>
				<protocArtifact>com.google.protobuf:protoc:3.0.2:exe:${os.detected.classifier}</protocArtifact>
				<pluginArtifact>io.grpc:protoc-gen-grpc-java:1.2.0:exe:${os.detected.classifier}</pluginArtifact>
			</configuration>
			<executions>
				<execution>
					<goals>
						<goal>compile</goal>
						<goal>compile-custom</goal>
					</goals>
				</execution>
			</executions>
		</plugin>
	</plugins>
</build>

3. 写服务类
public class HelloServer {
	public static void main(String[] args) throws IOException, InterruptedException {
		int port = 8080;
		Server server = ServerBuilder.forPort(port).addService(new HelloIml()) // 这里可以添加多个模块
				.build().start();
		System.out.println("Server started, listening on " + port);
		server.awaitTermination();
	}
	private static class HelloIml extends HelloGrpc.HelloImplBase {
		@Override
		public void sayHello(HelloRequest request, StreamObserver<HelloResponse> responseObserver) {
			HelloResponse helloResponse = HelloResponse.newBuilder()
					.setMessage("Hello " + request.getName() + ", I'm Java grpc Server").build();
			responseObserver.onNext(helloResponse);
			responseObserver.onCompleted();
		}
	}
}

4. 拿到proto文件,然后重复步骤2,写调用类
public class HelloClient {
	public static void main(String[] args) throws InterruptedException {
		ManagedChannel channel = ManagedChannelBuilder.forAddress("127.0.0.1", 8080).usePlaintext().build();
		HelloBlockingStub stub = HelloGrpc.newBlockingStub(channel);
		HelloRequest request = HelloRequest.newBuilder().setName("wang").build();
		HelloResponse response = stub.sayHello(request);
		System.out.println(response.getMessage());
	}
}
